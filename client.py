import random
from aiogram import Bot, F, types, Router, Dispatcher
import asyncio
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ChatMemberStatus, ChatType
from cachetools import TTLCache
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import DB
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto, ChatMemberUpdated, \
    ContentType, LabeledPrice, PreCheckoutQuery
from kb import menu_kb, back_menu_kb, profile_kb, pr_menu_kb, pr_menu_canc, work_menu_kb, back_work_menu_kb, \
    back_profile_kb, select_deposit_menu_kb, back_dep_kb, cancel_all_kb
import uuid
from config import CRYPTOBOT_TOKEN
import datetime
import pytz
from aiocryptopay import AioCryptoPay, Networks
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

client = Router()

task_cache = {}
task_cache_chat = {}



MOSCOW_TZ = pytz.timezone("Europe/Moscow")



class create_tasks(StatesGroup):
    chanel_task_create = State()
    chanel_task_create2 = State()

    chat_task_create = State()
    chat_task_create2 = State()

    post_task_create = State()
    post_task_create2 = State()

class buystars(StatesGroup):
    buystars = State()

class checks(StatesGroup):
    check_op1 = State()
    check_op = State()
    add_activation = State()
    check_password = State()
    single_check_create = State()
    multi_check_quantity = State()
    multi_check_amount = State()
    check_discription = State()
    check_lock_user = State()
    check_password1 = State()

class convertation(StatesGroup):
    mittorub = State()

class output(StatesGroup):
    rub1 = State()
    usdt1 = State()
    usdt = State()
    rub = State()



@client.message(F.text.startswith('/start')) 
async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
    user = await DB.select_user(message.from_user.id)
    await state.clear()

    args = message.text.split()
    referrer_id = None
    check_uid = None

    if len(args) > 1:
        param = args[1]
        if param.startswith("check_"):
            check_uid = param[len("check_"):]
        else:
            referrer_id = int(param)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.chat.type == 'private':
        if not user:
            await DB.add_user(message.from_user.id, message.from_user.username)
            if referrer_id:
                await DB.update_user(message.from_user.id, referrer_id=referrer_id)
                await DB.add_balance(referrer_id, 1000)
                await DB.record_referral_earnings(referrer_id=referrer_id, referred_user_id=message.from_user.id,
                                                  amount=1000)
                await bot.send_message(referrer_id,
                                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID {message.from_user.id} –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                                       reply_markup=back_menu_kb())

        elif check_uid:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
            check = await DB.get_check_by_uid(check_uid)
            if check and not await DB.is_check_activated(message.from_user.id, check_uid) and check[2] != message.from_user.id:
                usname = message.from_user.username
                if check[3] == 1:  # –°–∏–Ω–≥–ª-—á–µ–∫

                    if check[7]:

                        if (check[7])[0] == '@':

                            if check[7] != f'@{usname}':
                                await message.answer("‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", reply_markup=back_menu_kb())
                                return
                        elif check[7] != message.from_user.id:
                            await message.answer("‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è1</b>",
                                                 reply_markup=back_menu_kb())
                            return

                    await DB.add_balance(message.from_user.id, check[4])
                    await DB.process_check_activation(check_uid)
                    await DB.add_activated_check(message.from_user.id,check_uid)
                    await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check[4]} MitCoin</b>", reply_markup=back_menu_kb())

                    name = message.from_user.full_name
                    if usname == None:
                        usname = name
                    else:
                        usname = f'@{usname}'
                    await bot.send_message(check[2], text=f'üí∏ <b>–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ {check[4]} Mit Coin –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {usname}</b>', reply_markup=back_menu_kb())
                    return

                elif check[3] == 2:  # –ú—É–ª—å—Ç–∏-—á–µ–∫

                    if check[5] > 0:
                        if check[8]:  # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å
                            await message.answer("üîë <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å:</b>", reply_markup=back_menu_kb())
                            await state.set_state(checks.check_password1)
                            await state.update_data(check_uid=check_uid)
                            return

                        if check[9]:
                            try:
                                bot_member = await bot.get_chat_member(check[9], user_id=message.from_user.id)
                                if bot_member.status == "member":
                                    await DB.add_balance(message.from_user.id, check[4])
                                    await DB.process_check_activation(check_uid)
                                    await DB.add_activated_check(message.from_user.id, check_uid)
                                    await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check[4]} MitCoin</b>", reply_markup=back_menu_kb())
                                    return
                                else:
                                    await message.answer(f"üí∏ <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:</b> {check[9]}\n\n<i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</i>", reply_markup=back_menu_kb())
                                    return

                            except Exception as e:
                                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–∞ - {e}')
                                await message.answer('üò¢ <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–µ–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>',reply_markup=back_menu_kb())
                                return

                        await DB.add_balance(message.from_user.id, check[4])
                        await DB.process_check_activation(check_uid)
                        await DB.add_activated_check(message.from_user.id, check_uid)
                        await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check[4]} MitCoin</b>", reply_markup=back_menu_kb())
                        return

                    else:
                        await message.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=back_menu_kb())
                        return
            else:
                await message.answer("‚ùå <b>–î–∞–Ω–Ω—ã–π —á–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º:</b>\n\n<i>1) –≠—Ç–æ—Ç —á–µ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω –í–∞–º–∏\n2) –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π —á–µ–∫\n3) –ß–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</i>", reply_markup=back_menu_kb())
                return

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await DB.increment_all_users() 
        await message.answer(
            "üíé <b>PR MIT</b> - <em>–º–æ—â–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</em>\n\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=menu_kb())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞—Ö
    elif message.chat.type in ['group', 'supergroup'] and not check_uid:
        await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")


@client.message(checks.check_password1)
async def handle_check_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    check_uid = user_data.get("check_uid")
    print(check_uid)
    if not check_uid:
        await message.answer("‚ùå <i>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ...</i>", reply_markup=back_menu_kb())
        await state.clear()
        return

    check = await DB.get_check_by_uid(check_uid)
    print(check)
    if not check:
        await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=back_menu_kb())
        await state.clear()
        return
    print(message.text)
    if message.text == check[8]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        await DB.add_balance(message.from_user.id, check[4])
        await DB.process_check_activation(check_uid)
        await DB.add_activated_check(user_id=message.from_user.id, uid=check_uid)
        await message.answer(f"ü•≥ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {check[4]} MitCoin</b>", reply_markup=back_menu_kb())
        await state.clear()
    else:
        await message.answer("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>", reply_markup=back_menu_kb())
        return









@client.callback_query(F.data == 'profile')
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    rub_balance = user['rub_balance']
    if balance is None:
        balance = 0
    await callback.answer()
    await callback.message.edit_text(f'''
üëÄ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>

ü™™ <b>ID</b> - <code>{user_id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å ($MICO) - {balance} MitCoin
üí≥ –ë–∞–ª–∞–Ω—Å (—Ä—É–±–ª–∏) - {rub_balance} ‚ÇΩ
    ''', reply_markup=profile_kb())


@client.callback_query(F.data == 'back_menu')
async def back_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text(
        "<b>üíé PR MIT</b> - <em>–º–æ—â–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</em>\n\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=menu_kb())


@client.callback_query(F.data == 'rasslka_menu')
async def back_menu_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–µ - 1000 —Ä—É–±–ª–µ–π, –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var",
        reply_markup=back_menu_kb())


@client.callback_query(F.data == 'op_piar_menu')
async def back_menu_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–†–µ–∫–ª–∞–º–∞ –≤ –û–ü - 500 —Ä—É–±–ª–µ–π –∑–∞ 1 –¥–µ–Ω—å, –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var",
        reply_markup=back_menu_kb())


@client.callback_query(F.data == 'cancel_all')
async def cancel_all(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await profile_handler(callback)


@client.callback_query(F.data == 'pr_menu_cancel')
async def cancel_pr(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await pr_menu_handler(callback)


@client.callback_query(F.data == 'menu_stats')
async def stats_menu_handler(callback: types.CallbackQuery):
    user_count = len(await DB.select_all())
    all_tasks = len(await DB.get_tasks())
    calculate_total_cost = await DB.calculate_total_cost()
    statics = await DB.get_statics()
    print(statics)
    id, chanels, groups, all, see, u = statics[0] 
    id2, chanels2, groups2, all2, see2, users = statics[1] 
    balance = await DB.all_balance()
    text = f"""
    <b>üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üåê </b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}

üíº –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {all_tasks}
üí∏ –í–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: {calculate_total_cost}

üóì<b>–ï–∂–µ–¥–Ω–µ–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>: 
üíº–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤: {all2}
üì£ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã: {chanels2}
üë• –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—ã: {groups2}
üëÅÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {see2}
üë§–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {users}

üóì<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
üíº–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤: {all}
üì£ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã: {chanels}
üë• –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—ã: {groups}
üëÅÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {see}
üí∏–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {balance} MC

"""

    await callback.message.edit_text(text, reply_markup=back_menu_kb())
    await callback.answer()


@client.callback_query(F.data == 'pr_menu')
async def pr_menu_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üìã <b>–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è</b>\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=pr_menu_kb())


@client.callback_query(F.data == 'support')
async def refki_handler(callback: types.CallbackQuery):
    await callback.answer()
    roadmap = "https://telegra.ph/Dorozhnaya-karta-proekta-Mit-Coin--Mit-Coin-Project-Roadmap-11-25"
    token = "https://telegra.ph/Tokenomika-monety-MitCoin-MICO-11-25"
    channel = "https://t.me/mitcoinnews"
    add_button01 = InlineKeyboardButton(text="üìã –û –Ω–∞—Å", url='https://telegra.ph/O-proekte-Mit-Coin-11-26')
    add_button0 = InlineKeyboardButton(text="üíé –ö–∞–Ω–∞–ª –±–æ—Ç–∞", url=channel)
    add_button = InlineKeyboardButton(text="üöô –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", url=roadmap)
    add_button2 = InlineKeyboardButton(text="üí± –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞", url=token)
    add_button3 = InlineKeyboardButton(text="üõ†Ô∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data='support_menu')
    add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button01], [add_button], [add_button2], [add_button0], [add_button3], [add_button1]])
    await callback.message.edit_text('''
–¢—É—Ç –≤—ã –Ω–∞–π–¥–∏—Ç–µ –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    ''', reply_markup=keyboard)

@client.callback_query(F.data == 'support_menu')
async def refki_handler(callback: types.CallbackQuery):
    support_link = "https://t.me/mitcoinmen"
    add_button3 = InlineKeyboardButton(text="üõ†Ô∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url=support_link)
    add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button3], [add_button1]])
    await callback.message.edit_text('''
üõ†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥, –ø–∏—à–∏—Ç–µ @mitcoinmen. –ò–ª–∏ <a href='https://t.me/mitcoin_chat'>–≤ –Ω–∞—à –ß–ê–¢</a>. –ó–∞ –Ω–∞—Ö–æ–¥–∫—É –±–∞–≥–æ–≤ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.

–°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º - @Coin_var
        ''', reply_markup=keyboard)

@client.callback_query(F.data == 'op_help_menu')
async def refki_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("""
üë§ –û–ü (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ü–æ–¥–ø–∏—Å–∫–∞) - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã  

<b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü)</b>:

1) –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏ –≤ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã—Ö (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫ –ø–æ–¥–ø–∏—Å–∫–µ) –∫–∞–Ω–∞–ª–∞—Ö/—á–∞—Ç–∞—Ö üìõ
2) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup @–∫–∞–Ω–∞–ª 
(‚åõ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü —Å —Ç–∞–π–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup @–∫–∞–Ω–∞–ª **h, –≥–¥–µ ** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
<i>–ø—Ä–∏–º–µ—Ä - /setup @mitcoinnews 12h</i>
3) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsetup 
–∏–ª–∏ /unsetup @–∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ 
4) —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü –≤ —á–∞—Ç–µ - /status
        """,reply_markup=back_menu_kb())

@client.callback_query(F.data == 'bonus_menu')
async def bonus_menu(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    ops = await DB.get_bonus_ops()


    unsubscribed_channels = []
    if ops:
        for op in ops:
            channel_id = op[1]
            link = op[2]
            if not await is_user_subscribed(user_id, channel_id, bot):
                unsubscribed_channels.append(link)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    if unsubscribed_channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel) for channel in unsubscribed_channels],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='bonus_proverka')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        channels_list = "\n".join(
            [f"{channel}" for channel in unsubscribed_channels])

        await callback.message.edit_text(f"üéÅ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞</b>\n<i>(–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞):</i>\n\n{channels_list}", reply_markup=keyboard, disable_web_page_preview=True)
        return

    last_bonus_date = await DB.get_last_bonus_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_bonus_date == today:
        await callback.message.edit_text("‚ùå <b>–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb())
        return

    await DB.update_last_bonus_date(user_id)
    await DB.add_balance(user_id, 5000)
    await callback.answer('+5000 $MICO')
    await callback.message.edit_text(f"üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5000 $MICO</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üòâ", reply_markup=back_menu_kb())



@client.callback_query(F.data == 'bonus_proverka')
async def bonus_menu(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    ops = await DB.get_bonus_ops()


    unsubscribed_channels = []
    if ops:
        for op in ops:
            channel_id = op[1]
            link = op[2]
            if not await is_user_subscribed(user_id, channel_id, bot):
                unsubscribed_channels.append(link)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    if unsubscribed_channels:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel) for channel in unsubscribed_channels],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='bonus_proverka')],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')]
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        channels_list = "\n".join(
            [f"{channel}" for channel in unsubscribed_channels])

        await callback.message.edit_text(f"üéÅ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞</b>\n<i>(–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞):</i>\n\n{channels_list}", reply_markup=keyboard, disable_web_page_preview=True)
        return

    last_bonus_date = await DB.get_last_bonus_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_bonus_date == today:
        await callback.message.edit_text("‚ùå <b>–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb())
        return

    await DB.update_last_bonus_date(user_id)
    await DB.add_balance(user_id, 5000)
    await callback.answer('+5000 $MICO')
    await callback.message.edit_text(f"üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5000 $MICO</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üòâ", reply_markup=back_menu_kb())




@client.callback_query(F.data == 'output_menu')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button2]])
    await callback.message.edit_text(f'''
<b>üò¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ @mitcoinnews</b>
    ''', reply_markup=keyboard)



@client.callback_query(F.data == 'output_menuF')
async def outputmenu(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    add_button1 = InlineKeyboardButton(text=f"üí≤ USDT", callback_data=f'usdt_output_menu')
    add_button3 = InlineKeyboardButton(text=f"–†—É–±–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –†–§)", callback_data=f'rub_output_menu')
    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button3], [add_button2]])
    await callback.message.edit_text(f'''
‚ö° –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–≤–æ–¥ –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö <i>(—Ä—É–±–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)</i>

<span class="tg-spoiler"><b>–õ–∏–º–∏—Ç—ã:</b>
–í—ã–≤–æ–¥ –≤ USDT - –æ—Ç 2.5$ 
–í—ã–≤–æ–¥ –≤ —Ä—É–±–ª—è—Ö - –æ—Ç 250‚ÇΩ</span>

‚ö† –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b>
    ''', reply_markup=keyboard)


@client.callback_query(F.data == 'usdt_output_menuF')
async def outputusdtmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']

    data_cbr = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    usd_data = data_cbr['Valute']['USD']
    usd = usd_data['Value']
    usd = int(usd)
    user_usdt = rub_balance/usd

    print(user_usdt)
    if user_usdt < 2.5:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {round(user_usdt, 3)}$, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ 2.5$</b>", reply_markup=back_profile_kb())
        return


    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button2]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {round(user_usdt, 3)} USDT</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏', reply_markup=keyboard)
    await state.set_state(output.usdt)
    await state.update_data(usd=usd, user_usdt=user_usdt)



@client.message(output.usdt)
async def outputusdtmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        text = float(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>",reply_markup=back_menu_kb())
        return

    statedata = await state.get_data()
    usd = statedata['usd']
    user_usdt = statedata['user_usdt']

    if text < 2.5 or text > user_usdt:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 2.5 –¥–æ {user_usdt} USDT</b>', reply_markup=back_menu_kb())
        return
    await state.clear()
    await state.set_state(output.usdt1)
    await state.update_data(usd=usd, user_usdt=user_usdt, amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–æ—à–µ–ª—ë–∫ <b>USDT (BEP20)</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—ã–≤–æ–¥\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞/–Ω–µ–≤–µ—Ä–Ω–æ–π —Å–µ—Ç–∏ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb())





@client.message(output.usdt1)
async def outputusdtmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    usd = statedata['usd']
    amount = statedata['amount']

    try:
        wallet = str(message.text)

        if len(wallet) < 5 or len(wallet) > 50:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>", reply_markup=back_menu_kb())
            return

    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</b>",reply_markup=back_menu_kb())
        return


    usd = int(usd)
    sum = amount * usd
    sum = int(sum)

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount} USDT —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {sum}‚ÇΩ', reply_markup=back_menu_kb())

    await DB.add_rub_balance(user_id=user_id, amount=-sum)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=1)
    await state.clear()










@client.callback_query(F.data == 'rub_output_menu')
async def outputrubmenu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']


    if rub_balance < 250:
        await callback.message.edit_text(f"üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {rub_balance}‚ÇΩ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ <b>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 250‚ÇΩ –∏–ª–∏ –±–æ–ª–µ–µ</b>", reply_markup=back_profile_kb())
        return


    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text(f'üí≥ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)', reply_markup=keyboard)
    await state.set_state(output.rub)


@client.message(output.rub)
async def outputrubmenu1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    rub_balance = user['rub_balance']
    try:
        text = int(message.text)
    except ValueError:
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>", reply_markup=back_menu_kb())
        return

    if text < 250 or text > rub_balance:
        await message.answer(f'‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É <b>–æ—Ç 250‚ÇΩ –¥–æ {rub_balance}‚ÇΩ</b>', reply_markup=back_menu_kb())
        return

    await state.clear()
    await state.set_state(output.rub1)
    await state.update_data(amount=text)

    await message.answer(f'üëõ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü), –∞ —Ç–∞–∫ –∂–µ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>\n\n‚Äº <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ù–ï –±—É–¥–µ—Ç</b>', reply_markup=back_menu_kb())


@client.message(output.rub1)
async def outputrubmenu11(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statedata = await state.get_data()
    amount = statedata['amount']
    try:
        wallet = str(message.text)
        if len(wallet) > 100 or len(wallet) < 5:
            await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb())
            return

    except:
        await message.answer("‚Äº <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=back_menu_kb())
        return

    await message.answer(f'ü•≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞!</b>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {amount} —Ä—É–±–ª–µ–π', reply_markup=back_menu_kb())

    await DB.add_rub_balance(user_id=user_id, amount=-amount)
    await DB.add_output(user_id=user_id, amount=amount, wallet=wallet, type=2)
    await state.clear()











@client.callback_query(F.data == 'corvertation')
async def corvertation_handler(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_conversion_date == today:
        await callback.message.edit_text("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_profile_kb())
        return
    add_button1 = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å!", callback_data='mittorub')
    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='profile')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2]])
    await callback.message.edit_text('''
üåÄ <b>–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ $MICO –≤ —Ä—É–±–ª–∏!</b>

<i>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –∏ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞</i>
    ''', reply_markup=keyboard)

@client.callback_query(F.data == 'mittorub')
async def corvertation_rubtomit_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    mit_balance = user['balance']

    print(mit_balance)

    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")
    if last_conversion_date == today:
        await callback.message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_profile_kb())
        return 

    if mit_balance is None or mit_balance == 0:
        await callback.message.edit_text('üò¢ <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $MICO –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>', reply_markup=back_profile_kb())

    maxprocent = mit_balance // 100

    if maxprocent < 1000:
        await callback.message.edit_text('üò¢ <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $MICO –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>', reply_markup=back_profile_kb())


    add_button1 = InlineKeyboardButton(text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ({maxprocent} $MICO)", callback_data=f'convert_{maxprocent}')
    add_button2 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2]])

    await callback.message.edit_text(f'''
‚ùì <b>–°–∫–æ–ª—å–∫–æ $MICO (MitCoin) –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏?</b>

<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1% –æ—Ç MitCoin –±–∞–ª–∞–Ω—Å–∞</i> - {maxprocent}
    ''', reply_markup=keyboard)

    await state.set_state(convertation.mittorub)
    await state.update_data(maxprocent=maxprocent)


@client.message(convertation.mittorub)
async def corvertation_rubtomit_input(message: types.Message, state: FSMContext):
    maxprocent = await state.get_data()
    maxprocent = maxprocent['maxprocent']
    print(f'–º–∞–∫—Å –ø—Ä–æ—Ü–µ–Ω—Ç {maxprocent}')

    try:
        convert_amount = int(message.text)
        await state.clear()
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=back_menu_kb())
        return

    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']


    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")

    if last_conversion_date == today:
        await message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb())
        return

    if convert_amount > maxprocent:
        await message.answer('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 1% –æ—Ç —Å–≤–æ–µ–≥–æ $MICO –±–∞–ª–∞–Ω—Å–∞', reply_markup=back_menu_kb())
        return

    if convert_amount < 1000:
        await message.answer('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–Ω—å—à–µ 1000 $MICO', reply_markup=back_menu_kb())
        return


    add_rub_balance = convert_amount//1000  # 1000 $MICO = 1 —Ä—É–±–ª—å
    await DB.add_rub_balance(user_id, add_rub_balance)
    await DB.add_balance(user_id, -convert_amount)
    await DB.update_last_conversion_date(user_id)

    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']

    await message.answer(f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {convert_amount} $MICO –≤ {add_rub_balance}‚ÇΩ</b>\n\n"
                                     f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>\nMitCoin - {mit_balance} $MICO;\n–†—É–±–ª–∏ - {rub_balance}‚ÇΩ", reply_markup=back_menu_kb())




@client.callback_query(lambda c: c.data.startswith("convert_"))
async def corvertation_rubtomit_input1(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    convert_amount = int(callback.data.split('_')[1])  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']
    maxprocent = mit_balance // 100

    last_conversion_date = await DB.get_last_conversion_date(user_id)
    today = datetime.datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d")

    if last_conversion_date == today:
        await callback.message.answer("‚ùå <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ <i>(–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö)</i>", reply_markup=back_menu_kb())
        return

    if convert_amount > maxprocent:
        await callback.message.edit_text('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 1% –æ—Ç —Å–≤–æ–µ–≥–æ $MICO –±–∞–ª–∞–Ω—Å–∞', reply_markup=back_menu_kb())
        return

    if convert_amount < 1000:
        await callback.message.edit_text('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –º–µ–Ω—å—à–µ 1000 $MICO', reply_markup=back_menu_kb())
        return


    add_rub_balance = convert_amount//1000  # 1000 $MICO = 1 —Ä—É–±–ª—å
    await DB.add_rub_balance(user_id, add_rub_balance)
    await DB.add_balance(user_id, -convert_amount)
    await DB.update_last_conversion_date(user_id)

    user = await DB.select_user(user_id)
    mit_balance = user['balance']
    rub_balance = user['rub_balance']

    await callback.message.edit_text(f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ {convert_amount} $MICO –≤ {add_rub_balance}‚ÇΩ</b>\n\n"
                                     f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>\nMitCoin - {mit_balance} $MICO;\n–†—É–±–ª–∏ - {rub_balance}‚ÇΩ", reply_markup=back_menu_kb())










CRYPTOBOT_TESTNET = False  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞

cryptopay = AioCryptoPay(token=CRYPTOBOT_TOKEN, network=Networks.MAIN_NET)


@client.callback_query(F.data == 'select_deposit_menu')
async def select_deposit_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –í–∞–º —Å–ø–æ—Å–æ–± –¥–µ–ø–æ–∑–∏—Ç–∞:</b>\n\nüî• –ê–∫—Ü–∏—è, –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ –∑–∞ —Ä—É–±–ª–∏ +25% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!", reply_markup=select_deposit_menu_kb())

@client.callback_query(F.data == 'deposit_menu')
async def deposit_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    buttons = [
        ("100–∫ MITcoin | 1üí≤", 100000, 1),
        ("250–∫ MITcoin | 2.5üí≤", 250000, 2.5),
        ("500–∫ MITcoin | 5üí≤", 500000, 5),
        ("1–∫–∫ MITcoin | 10üí≤", 1000000, 10),
        ("2.5–∫–∫ MITcoin | 25üí≤", 2500000, 25),
        ("5–∫–∫ MITcoin | 50üí≤", 5000000, 50),
        ("üîô –ù–∞–∑–∞–¥", None, None)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
    inline_buttons = []
    for text, amount, price in buttons:
        if amount is not None and price is not None and isinstance(amount, int):
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data=f'deposit_{amount}_{price}')])
        else:
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data='select_deposit_menu')])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    builder = InlineKeyboardMarkup(inline_keyboard=inline_buttons)  # –ü–µ—Ä–µ–¥–∞—á–∞ inline_keyboard

    await callback.message.edit_text(
        "üíµ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Å –ø–æ–º–æ—â—å—é CryptoBot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=builder)


@client.callback_query(F.data.startswith('deposit_'))
async def handle_deposit(callback: types.CallbackQuery, bot: Bot):
    data = callback.data.split('_')
    amount = int(data[1])  # –°—É–º–º–∞ MITcoin
    price = float(data[2])  # –¶–µ–Ω–∞ –≤ USDT

    try:
        invoice = await cryptopay.create_invoice(
            amount=price,
            asset='USDT',  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—á–µ—Ç –¥–ª—è USDT
            description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} MITcoin'
        )

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ invoice –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"–û–±—ä–µ–∫—Ç –∏–Ω–≤–æ–π—Å–∞: {invoice}")

        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = invoice.bot_invoice_url

        if not payment_url:
            logger.error("URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.message.edit_text("ü§î –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...",
                                             reply_markup=back_profile_kb())
            return

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        builder = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîó –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="deposit_menu")
            ]
        ])

        await callback.message.edit_text(
            f"üßæ <b>–í–∞—à —Å—á–µ—Ç –Ω–∞ {amount} MITcoin:</b> \n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} USDT. \n\n‚ÄºÔ∏è <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ –ù–ï –í–´–•–û–î–ò–¢–ï –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–Ω–∞—á–µ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –ù–ï –ë–£–î–ï–¢</b>\n\n‚è≥ <em>–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç</em>",
            reply_markup=builder
        )

        user_id = callback.from_user.id
        invoice_id = invoice.invoice_id
        for _ in range(30):  # 30 * 10 —Å–µ–∫—É–Ω–¥ = 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
            invoice = await cryptopay.get_invoices(invoice_ids=invoice_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {invoice.status}")

            if invoice.status == 'paid':
                # –ï—Å–ª–∏ —Å—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º MITCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await DB.add_balance_dep(user_id, amount)
                await DB.add_deposit(user_id, amount=price)
                await callback.message.edit_text(f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} MITcoin",
                                                 reply_markup=back_menu_kb())
                return

            await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")




@client.callback_query(F.data == 'dep_stars_menu')
async def dep_stars_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Stars
    buttons = [
        ("100–∫ MITcoin | 49 ‚≠ê", 100000, 49),
        ("250–∫ MITcoin | 124 ‚≠ê", 250000, 124),
        ("500–∫ MITcoin | 249 ‚≠ê", 500000, 249),
        ("1–∫–∫ MITcoin | 499 ‚≠ê", 1000000, 499),
        ("2.5–∫–∫ MITcoin | 1249 ‚≠ê", 2500000, 1249),
        ("5–∫–∫ MITcoin | 2499 ‚≠ê", 5000000, 2499),
        ("üîô –ù–∞–∑–∞–¥", None, None)  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
    inline_buttons = []
    for text, amount, price in buttons:
        if amount is not None and price is not None and isinstance(amount, int):
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data=f'stars_{amount}_{price}')])
        else:
            inline_buttons.append([InlineKeyboardButton(text=text, callback_data='select_deposit_menu')])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    builder = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

    await callback.message.edit_text(
        "‚≠ê <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Telegram Stars:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=builder
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Stars
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
@client.callback_query(F.data.startswith('stars_'))
async def process_stars_payment(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    data = callback.data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    try:
        amount = int(data[1])  # –°—É–º–º–∞ MITcoin
        stars = int(data[2])   # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ Stars
    except (IndexError, ValueError):
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    prices = [LabeledPrice(label=f"{stars} Stars", amount=stars)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        await bot.send_invoice(
            chat_id=user_id,
            title=f"‚≠ê {amount} Mit Coin",
            description=f"–ö—É–ø–∏—Ç—å {amount} Mit Coin (MICO) –∑–∞ {stars} Stars",
            payload=f"user_{user_id}_stars_{amount}",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="stars_payment"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        print(e)
        await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@client.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@client.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    payload = message.successful_payment.invoice_payload
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º payload
        parts = payload.split('_')  # ['user', '<user_id>', 'stars', '<amount>']
        user_id = int(parts[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id
        amount = int(parts[3])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount
    except (ValueError, IndexError) as e:
        await message.answer("‚òπ  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —á–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã—à–µ")
        print(f"Error parsing payload: {payload} - {e}")
        return

    if amount == 100000:
        stars = 49
    elif amount == 250000:
        stars = 124
    elif amount == 500000:
        stars = 249
    elif amount == 1000000:
        stars = 499
    elif amount == 2500000:
        stars = 1249
    elif amount == 5000000:
        stars = 2499
    else:
        stars = amount / 2000

    dep_stats = stars * 0.013
    # –ó–∞—á–∏—Å–ª—è–µ–º MITcoin –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.add_balance_dep(user_id, amount)
    await DB.add_deposit(user_id, amount=dep_stats)

    # –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (invoice_payload)

    await message.answer(
        f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüí≥ –°—É–º–º–∞: <b>{amount} MITcoin</b>\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{stars} Stars</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏! üòä",
        reply_markup=back_profile_kb())






@client.callback_query(F.data == 'buy_stars')
async def buystars_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("<b>–í—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ Telegram Stars –Ω–∞ Mit Coin –ø–æ –∫—É—Ä—Å—É:</b>\n\n1‚≠ê = 2000 Mit Coin\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å</b>", reply_markup=back_menu_kb())
    await state.set_state(buystars.buystars)


@client.message(buystars.buystars)
async def buystars_hand(message: types.Message, state: FSMContext, bot: Bot):
    stars_amount = message.text
    try:
        stars_amount = int(stars_amount)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=back_menu_kb())
        return

    user_id = message.from_user.id
    stars = stars_amount
    amount = stars * 2000

    await state.clear()
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã

    prices = [LabeledPrice(label=f"{stars} Stars", amount=stars)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–ü—Ä–æ–¥–∞–∂–∞ ‚≠ê",
            description=f"–ü—Ä–æ–¥–∞—Ç—å {stars} ‚≠ê –∑–∞ {amount} MitCoin",
            payload=f"user_{user_id}_stars_{amount}",
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="stars_payment"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", reply_markup=back_menu_kb())
        print(e)





@client.callback_query(F.data == 'rub_donate')
async def rub_donate_h(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üî• –ê–∫—Ü–∏—è, –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ –∑–∞ —Ä—É–±–ª–∏ +25% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!\n\nüí∞ –î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Coin_var", reply_markup=back_dep_kb())


@client.callback_query(F.data == 'refka_menu')
async def refki_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    bot_username = (await bot.get_me()).username
    ref_link = f'https://t.me/{bot_username}?start={user_id}'
    user = await DB.select_user(user_id)

    if user and user.get('referrer_id'):
        referrer_id = user['referrer_id']
    else:
        referrer_id = '–Ω–µ—Ç—É'

    referred_users = await DB.get_referred_users(user_id)
    earned_from_referrals = await DB.get_earned_from_referrals(user_id)
    if earned_from_referrals is not None:
        earned_from_referrals = round(earned_from_referrals, 3)
    else:
        earned_from_referrals = 0

    text = (f'''
<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> \n<code>{ref_link}</code>\n
ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: <code>{referrer_id}</code>\n

<em>1000 MITcoin –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</em>
<em>15% –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</em>

–ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(referred_users)} 
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned_from_referrals} MIT üíé
    ''')

    await callback.message.edit_text(text, reply_markup=back_profile_kb())
    await callback.answer()


@client.callback_query(F.data == 'work_menu')
async def works_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id
    total_count = await DB.calculate_total_cost()
    chanel_stats = len(await DB.select_chanel_tasks())
    chat_stats = len(await DB.select_chat_tasks())
    post_stats = len(await DB.select_post_tasks())

    await callback.message.edit_text(f'''
üí∞ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å - <b>{total_count} MITcoin</b>

<b>–ó–∞–¥–∞–Ω–∏–π –Ω–∞:</b>
üì£ –ö–∞–Ω–∞–ª—ã - {chanel_stats}
üë• –ß–∞—Ç—ã - {chat_stats}
üëÄ –ü–æ—Å—Ç—ã - {post_stats}


üö® <em>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç —Ä–∞–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —à—Ç—Ä–∞—Ñ!</em>

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞</b> üëá    
    ''', reply_markup=work_menu_kb())


# –°–æ–∑–¥–∞–µ–º –∫—ç—à –¥–ª—è –∑–∞–¥–∞—á (—Ö—Ä–∞–Ω–∏—Ç—Å—è 1 –º–∏–Ω—É—Ç)
task_cache = TTLCache(maxsize=100000, ttl=600)
task_cache_chat = TTLCache(maxsize=100000, ttl=480)


async def update_task_cache_for_all_users(bot, DB):
    tasks = [cache_all_tasks(bot, DB)]
    await asyncio.gather(*tasks)
    print("–ö—ç—à (–∫–∞–Ω–∞–ª—ã) –æ–±–Ω–æ–≤–ª–µ–Ω")


async def update_task_cache_for_all_users_chat(bot, DB):
    tasks = [get_cached_tasks_chat(bot, DB)]
    await asyncio.gather(*tasks)
    print("–ö—ç—à (—á–∞—Ç—ã) –æ–±–Ω–æ–≤–ª–µ–Ω")


semaphore = asyncio.Semaphore(2)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á


async def cache_all_tasks(bot, DB):
    """–ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞."""
    all_tasks = await DB.select_chanel_tasks()
    tasks_with_links = []
    print(f'–≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–¥ - {len(all_tasks)}')

    async with semaphore:
        for task in all_tasks:
            retry_count = 0
            while retry_count < 5:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                try:
                    chat = await bot.get_chat(task[2])
                    invite_link = chat.invite_link
                    if invite_link and task[3] > 0:
                        chat_title = chat.title
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, –Ω–æ –±–µ–∑ —Å–∞–º–æ–π —Å—Å—ã–ª–∫–∏
                        tasks_with_links.append((*task, chat_title))
                    else:
                        print(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É - {task[2]}")
                    break  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                except Exception as e:
                    error_message = str(e)
                    if "Flood control exceeded" in error_message:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                        wait_time = 60  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if "retry after" in error_message:
                            try:
                                wait_time = int(error_message.split("retry after ")[-1].split(" ")[0]) + 5  # +5 —Å–µ–∫—É–Ω–¥
                            except (IndexError, ValueError):
                                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                        print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_time)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        retry_count += 1
                    else:
                        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—ç—à–∞: {e}')
                        break  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫—ç—à
    task_cache['all_tasks'] = tasks_with_links
    print(f"–ö—ç—à (–∫–∞–Ω–∞–ª—ã) –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è... –¥–ª–∏–Ω–∞ - {len(task_cache)}, —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π - {tasks_with_links}")


async def get_cached_tasks_chat(bot, DB):
    """–ö—ç—à–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏."""
    all_tasks = await DB.select_chat_tasks()
    tasks_with_links_chat = []

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    async with semaphore:
        for task in all_tasks:
            invite_link = await check_admin_and_get_invite_link_chat(bot, task[2])
            if invite_link and task[3] > 0:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                try:
                    chat = await bot.get_chat(task[2])
                    chat_title = chat.title
                except:
                    chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, –Ω–æ –±–µ–∑ —Å–∞–º–æ–π —Å—Å—ã–ª–∫–∏
                tasks_with_links_chat.append((*task, chat_title))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤ –∫—ç—à
    task_cache_chat['all_tasks'] = tasks_with_links_chat



async def scheduled_cache_update(bot, DB):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–¥–∞—á —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç."""
    while True:
        await update_task_cache_for_all_users(bot, DB)
        await asyncio.sleep(600)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)


async def scheduled_cache_update_chat(bot, DB):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∑–∞–¥–∞—á —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç."""
    while True:
        await update_task_cache_for_all_users_chat(bot, DB)
        await asyncio.sleep(480)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 300 —Å–µ–∫—É–Ω–¥ (7 –º–∏–Ω—É—Ç)


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
async def start_background_tasks(bot, DB):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    asyncio.create_task(scheduled_cache_update(bot, DB))
    asyncio.create_task(scheduled_cache_update_chat(bot, DB))


@client.callback_query(F.data == 'work_chanel')
async def taskss_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    chanelpage = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache.get('all_tasks', [])
    print(f'–≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∫—ç—à - {len(all_tasks)}')
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]
    print(f'–∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - {len(tasks)}')
    if tasks:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        random.shuffle(tasks)
        print(f'—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è {user_id} - {len(tasks)}')
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        tasks_on_page, total_pages = await paginate_tasks_chanel(tasks, chanelpage)
        keyboard = await generate_tasks_keyboard_chanel(tasks_on_page, chanelpage, total_pages, bot)

        await callback.message.edit_text(
            "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@client.callback_query(lambda c: c.data.startswith("chanelpage_"))
async def change_page_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    chanelpage = int(callback.data.split('_')[1])  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]
    if tasks:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        random.shuffle(tasks)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        tasks_on_page, total_pages = await paginate_tasks_chanel(tasks, chanelpage)
        keyboard = await generate_tasks_keyboard_chanel(tasks_on_page, chanelpage, total_pages, bot)

        await callback.message.edit_text(
            "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb()
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
async def generate_tasks_keyboard_chanel(tasks, chanelpage, total_pages, bot):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks:
        chat_id = task[2]
        chat_title = task[5]


        button_text = f"{chat_title} | +1500"
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"chaneltask_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if chanelpage > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"chanelpage_{chanelpage - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(chanelpage), callback_data="current_page"))
    if chanelpage < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"chanelpage_{chanelpage + 1}"))
    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    return builder.as_markup()


async def paginate_tasks_chanel(tasks, chanelpage=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (chanelpage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages


async def check_admin_and_get_invite_link_chanel(bot, target_id):
    try:
        ChatFullInfo = await bot.get_chat(target_id)
        invite_link = ChatFullInfo.invite_link
        return invite_link
    except Exception as e:
        print(e)
        return False


@client.callback_query(lambda c: c.data.startswith("chaneltask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    amount = task[3]

    invite_link = ""

    invite_link = await check_admin_and_get_invite_link_chanel(bot, task[2])
    chat_id = task[2]
    chat = await bot.get_chat(chat_id)
    task_info = f"""
üì¢ {chat.title} | <i>{amount}</i>
<i>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É -</i> <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b> üîÑÔ∏è

{invite_link}    
    """
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô", callback_data="work_chanel"))
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
    builder.add(types.InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"chanelreport_{task_id}"))
    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())


@client.callback_query(F.data.startswith('chanelcheck_'))
async def check_subscription_chanel(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    if task is None:
        await callback.message.edit_text("‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=back_menu_kb())
        await asyncio.sleep(1)

    user_id = callback.from_user.id
    target_id = task[2]
    invite_link = await check_admin_and_get_invite_link_chanel(bot, task[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        bot_member = await bot.get_chat_member(target_id, callback.message.chat.id)
        if bot_member.status != "member":
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chanel"))
            builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
            await callback.message.edit_text(
                f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=builder.as_markup())
            return
    except:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chanel"))
        builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chanelcheck_{task_id}"))
        await callback.message.edit_text(
            f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            reply_markup=builder.as_markup())
        return

    if not await DB.is_task_completed(user_id, task[0]):

        # –®–∞–≥ 4. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤—ã—á–∏—Ç–∞–µ–º amount –Ω–∞ 1)
        await DB.update_task_amount(task_id)
        await DB.add_completed_task(user_id, task_id)
        await DB.add_balance(amount=1500, user_id=user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        updated_task = await DB.get_task_by_id(task_id)

        if updated_task[3] == 0:
            delete_task = await DB.get_task_by_id(task_id)
            creator_id = delete_task[1]
            await DB.delete_task(task_id)
            await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                   reply_markup=back_menu_kb())
            
        await DB.increment_all_subs_chanel() 
        await DB.increment_all_taasks() 
        await callback.message.edit_text("‚úÖ")
        await callback.answer("+1500")
        await asyncio.sleep(2)
    else:
        await callback.message.edit_text("‚Äº –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=back_menu_kb())
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        await asyncio.sleep(3)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        chanelpage = 1
        tasks_on_page, total_pages = await paginate_tasks_chanel(tasks, chanelpage)
        keyboard = await generate_tasks_keyboard_chanel(tasks_on_page, chanelpage, total_pages, bot)
        await callback.message.edit_text(
            "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


@client.callback_query(F.data.startswith('chanelreport_'))
async def check_subscription_chanel(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    user_id = callback.from_user.id
    target_id = task[2]

    chat = await bot.get_chat(target_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"chanelreportconfirm_{task_id}"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"chaneltask_{task_id}"))
    await callback.message.edit_text(f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <b>{chat.title}</b>?',
                                     reply_markup=builder.as_markup())


@client.callback_query(F.data.startswith('chanelreportconfirm_'))
async def check_subscription_chanel(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    user_id = callback.from_user.id
    target_id = task[2]
    chat = await bot.get_chat(target_id)
    await DB.add_report(task_id=task_id, chat_id=target_id, user_id=user_id)
    await callback.message.edit_text(f'‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–∞–Ω–∞–ª <b>{chat.title}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    await asyncio.sleep(1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        chanelpage = 1
        tasks_on_page, total_pages = await paginate_tasks_chanel(tasks, chanelpage)
        keyboard = await generate_tasks_keyboard_chanel(tasks_on_page, chanelpage, total_pages, bot)
        await callback.message.edit_text(
            "üì¢ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\nüé¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


@client.callback_query(F.data == 'work_chat')
async def tasksschat_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    chatpage = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache_chat.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        tasks_on_page, total_pages = await paginate_tasks_chat(tasks, chatpage)
        keyboard = await generate_tasks_keyboard_chat(tasks_on_page, chatpage, total_pages, bot)

        await callback.message.edit_text(
            "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@client.callback_query(lambda c: c.data.startswith("chatpage_"))
async def change_page_handler(callback: types.CallbackQuery, bot: Bot):
    chatpage = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache_chat.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        tasks_on_page, total_pages = await paginate_tasks_chat(tasks, chatpage)
        keyboard = await generate_tasks_keyboard_chat(tasks_on_page, chatpage, total_pages, bot)

        await callback.message.edit_text(
            "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
            reply_markup=back_work_menu_kb()
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
async def generate_tasks_keyboard_chat(tasks, chatpage, total_pages, bot):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks:
        chat_id = task[2]

        amount = task[3]
        chat_title = task[5]

        button_text = f"{chat_title} | +1500"
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"chattask_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if chatpage > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"chatpage_{chatpage - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(chatpage), callback_data="current_page"))
    if chatpage < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"chatpage_{chatpage + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()


async def paginate_tasks_chat(tasks, chatpage=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (chatpage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages


async def check_admin_and_get_invite_link_chat(bot, target_id):
    try:
        ChatFullInfo = await bot.get_chat(target_id)
        invite_link = ChatFullInfo.invite_link
        return invite_link

    except Exception as e:
        return False


@client.callback_query(lambda c: c.data.startswith("chattask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    amount = task[3]

    invite_link = ""

    invite_link = await check_admin_and_get_invite_link_chat(bot, task[2])
    chat_id = task[2]
    chat = await bot.get_chat(chat_id)
    task_info = f"""
üë§ {chat.title} | <i>{amount}</i>
<i>–í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É -</i> <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</b> üîÑÔ∏è

{invite_link}    
    """
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô", callback_data="work_chat"))
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))
    builder.add(types.InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"chatreport_{task_id}"))
    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())


@client.callback_query(F.data.startswith('chatcheck_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    if task is None:
        await callback.message.edit_text("‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", reply_markup=back_menu_kb())
        await asyncio.sleep(1)
    user_id = callback.from_user.id
    target_id = task[2]
    invite_link = await check_admin_and_get_invite_link_chat(bot, task[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        bot_member = await bot.get_chat_member(target_id, callback.message.chat.id)
        if bot_member.status != "member":
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chat"))
            builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))
            await callback.message.edit_text(
                f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=builder.as_markup())
            return
    except:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô", callback_data="work_chat"))
        builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å üîÑÔ∏è", callback_data=f"chatcheck_{task_id}"))

        await callback.message.edit_text(
            f"üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç</b> –ø–æ —Å—Å—ã–ª–∫–µ {invite_link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            reply_markup=builder.as_markup())
        return

    if not await DB.is_task_completed(user_id, task[0]):
        # –®–∞–≥ 4. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤—ã—á–∏—Ç–∞–µ–º amount –Ω–∞ 1)
        await DB.update_task_amount(task_id)
        await DB.add_completed_task(user_id, task_id)
        await DB.add_balance(amount=1500, user_id=user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        updated_task = await DB.get_task_by_id(task_id)
        if updated_task[3] == 0:
            delete_task = await DB.get_task_by_id(task_id)
            creator_id = delete_task[1]
            await DB.delete_task(task_id)
            await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                   reply_markup=back_menu_kb())

        await DB.increment_all_subs_group() 
        await DB.increment_all_taasks()
        await callback.message.edit_text("‚úÖ")
        await callback.answer("+1500")
        await asyncio.sleep(2)
    else:
        await callback.message.edit_text("‚Äº –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=back_menu_kb())
        await asyncio.sleep(3)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache_chat.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        chatpage = 1
        tasks_on_page, total_pages = await paginate_tasks_chat(tasks, chatpage)
        keyboard = await generate_tasks_keyboard_chat(tasks_on_page, chatpage, total_pages, bot)
        await callback.message.edit_text(
            "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


@client.callback_query(F.data.startswith('chatreport_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    target_id = task[2]

    chat = await bot.get_chat(target_id)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"chatreportconfirm_{task_id}"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"chattask_{task_id}"))
    await callback.message.edit_text(f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç <b>{chat.title}</b>?',
                                     reply_markup=builder.as_markup())


@client.callback_query(F.data.startswith('chatreportconfirm_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    user_id = callback.from_user.id
    target_id = task[2]
    chat = await bot.get_chat(target_id)
    await DB.add_report(task_id=task_id, chat_id=target_id, user_id=user_id)
    await callback.message.edit_text(f'‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ —á–∞—Ç <b>{chat.title}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    await asyncio.sleep(1)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    all_tasks = task_cache_chat.get('all_tasks', [])
    tasks = [
        task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])
    ]

    if tasks:
        random.shuffle(tasks)
        chatpage = 1
        tasks_on_page, total_pages = await paginate_tasks_chat(tasks, chatpage)
        keyboard = await generate_tasks_keyboard_chat(tasks_on_page, chatpage, total_pages, bot)
        await callback.message.edit_text(
            "üë§ <b>–ó–∞–¥–∞–Ω–∏—è –Ω–∞ —á–∞—Ç—ã:</b>\n\nüé¢ –ß–∞—Ç—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n‚ö°<i>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π, –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —à—Ç—Ä–∞—Ñ!</i>",
            reply_markup=keyboard)
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


@client.callback_query(F.data == 'work_post')
async def works_post_handler(callback: types.CallbackQuery, bot: Bot):

    user_id = callback.from_user.id
    all_tasks = await DB.select_post_tasks()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π

    if all_tasks:

        available_tasks = [task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])]

        if not available_tasks:
            await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                             reply_markup=back_work_menu_kb())
            return

        for task in available_tasks:
            task_id, target_id, amount = task[0], task[2], task[3]
            chat_id, message_id = map(int, target_id.split(":"))
            user_id = callback.from_user.id
            try:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="üîô", callback_data="work_menu"))
                builder.add(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data=f"work_post"))
                builder.add(types.InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"postreport_{task_id}"))
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                await callback.message.answer_sticker(
                    'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
                await asyncio.sleep(3)

                await callback.message.answer(
                    f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–æ—Å—Ç? +250 MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞",
                    reply_markup=builder.as_markup())

                await DB.update_task_amount(task_id)
                updated_task = await DB.get_task_by_id(task_id)
                await DB.add_completed_task(user_id, task_id)
                await DB.add_balance(amount=250, user_id=user_id)
                if updated_task[3] == 0:
                    delete_task = await DB.get_task_by_id(task_id)
                    creator_id = delete_task[1]
                    await DB.delete_task(task_id)
                    await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                                           reply_markup=back_menu_kb())

                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                continue

        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


@client.callback_query(F.data.startswith('postreport_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    user_id = callback.from_user.id
    target_id = task[2]

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"postreportconfirm_{task_id}"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"work_post"))
    await callback.message.edit_text(f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç?',
                                     reply_markup=builder.as_markup())


@client.callback_query(F.data.startswith('postreportconfirm_'))
async def check_subscription_chat(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    user_id = callback.from_user.id
    target_id = task[2]

    await DB.add_report(task_id=task_id, chat_id=target_id, user_id=user_id)
    await callback.message.edit_text(f'‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    await asyncio.sleep(1)

    all_tasks = await DB.select_post_tasks()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    if all_tasks:
        available_tasks = [task for task in all_tasks if not await DB.is_task_completed(user_id, task[0])]
        if not available_tasks:
            await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                             reply_markup=back_work_menu_kb())
            return
        for task in available_tasks:
            task_id, target_id, amount = task[0], task[2], task[3]
            chat_id, message_id = map(int, target_id.split(":"))
            user_id = callback.from_user.id
            try:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="üîô", callback_data="work_menu"))
                builder.add(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚è≠Ô∏è", callback_data=f"work_post"))
                builder.add(types.InlineKeyboardButton(text="–†–µ–ø–æ—Ä—Ç ‚ö†Ô∏è", callback_data=f"postreport_{task_id}"))
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                await callback.message.answer_sticker(
                    'CAACAgIAAxkBAAENFeZnLS0EwvRiToR0f5njwCdjbSmWWwACTgEAAhZCawpt1RThO2pwgjYE')
                await asyncio.sleep(3)

                await callback.message.answer(
                    f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–æ—Å—Ç? +250 MITcoin</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞",
                    reply_markup=builder.as_markup())

                await DB.update_task_amount(task_id)
                updated_task = await DB.get_task_by_id(task_id)

                await DB.add_completed_task(user_id, task_id)
                await DB.add_balance(amount=250, user_id=user_id)

                if updated_task[3] == 0:
                    delete_task = await DB.get_task_by_id(task_id)
                    creator_id = delete_task[1]
                    await DB.delete_task(task_id)
                    await DB.increment_all_see()
                    await DB.increment_all_taasks()
                    await bot.send_message(creator_id, f"üéâ –û–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
                                           reply_markup=back_menu_kb())

                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                continue

        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())
    else:
        await callback.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–æ—Å—Ç—ã –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ üòâ",
                                         reply_markup=back_work_menu_kb())


# –ù–∞–∑–Ω–∞—á–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
TASK_TYPES = {
    1: 'üì¢ –ö–∞–Ω–∞–ª',
    2: 'üë• –ß–∞—Ç',
    3: 'üëÄ –ü–æ—Å—Ç'
}


async def generate_tasks_keyboard(tasks, page, total_pages):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in tasks:
        task_type = TASK_TYPES.get(task[4], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        amount = task[3]
        button_text = f"{task_type} | {amount}"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"task_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if page > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(page), callback_data="current_page"))
    if page < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
def paginate_tasks(tasks, page=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages


@client.callback_query(F.data == 'my_works')
async def taskss_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tasks = await DB.get_tasks_by_user(user_id)
    print(tasks)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, page)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard(tasks_on_page, page, total_pages)

    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)


@client.callback_query(lambda c: c.data.startswith("page_"))
async def change_page_handler(callback: types.CallbackQuery):
    page = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    tasks = await DB.get_tasks_by_user(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(tasks, page)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard(tasks_on_page, page, total_pages)

    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
async def check_admin_and_get_invite_link(bot, target_id):
    try:
        chat_administrators = await bot.get_chat_administrators(target_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        for admin in chat_administrators:
            if admin.user.id == bot.id:
                # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                try:
                    ChatFullInfo = await bot.get_chat(target_id)
                    invite_link = ChatFullInfo.invite_link
                    return invite_link

                except Exception as e:
                    print(f'–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è {target_id}, –æ—à–∏–±–∫–∞ - {e}')
                    return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
        return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"
    except:
        return "üòë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç"


@client.callback_query(lambda c: c.data.startswith("task_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    task_type = TASK_TYPES.get(task[4], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    amount = task[3]
    if amount is None:
        amount = 1
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    price_per_unit = {1: 1500, 2: 1500, 3: 300}
    cost = amount * price_per_unit.get(task[4], 0)

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
    invite_link = ""
    if task[4] in [1, 2]:  # –ö–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç
        invite_link = await check_admin_and_get_invite_link(bot, task[2])
        chat_id = task[2]
        try:
            chat = await bot.get_chat(chat_id)
            chat_title = chat.title
        except:
            chat_title = "‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω —Å –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ö†Ô∏è"
        task_info = f"""
<b>{task_type}</b>: 
{chat_title}

üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} MITcoin 

{invite_link}    
            """
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_works"))
        builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"))
        await callback.message.edit_text(task_info, reply_markup=builder.as_markup())

    if task[4] in [3]:
        target_id = task[2]
        chat_id, message_id = map(int, target_id.split(":"))
        user_id = callback.from_user.id
        task_info = f"""
{task_type}

üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} MITcoin 

{invite_link}    
            """
        await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_works"))
        builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"))
        await callback.message.answer(task_info, reply_markup=builder.as_markup())


@client.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_task_by_id(task_id)
    amount = task[3]
    if amount is None:
        amount = 1
    price_per_unit = {1: 1500, 2: 1500, 3: 300}
    cost = amount * price_per_unit.get(task[4], 0)
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    new_balance = balance + cost

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await DB.delete_task(task_id)
    await DB.update_balance(user_id, balance=new_balance)
    await callback.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º
    user_id = callback.from_user.id
    tasks = await DB.get_tasks_by_user(user_id)
    page = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, page)
    keyboard = await generate_tasks_keyboard(tasks_on_page, page, total_pages)

    await callback.message.edit_text("üíº <b>–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:</b>", reply_markup=keyboard)


@client.callback_query(F.data == 'chanel_pr_button')
async def pr_chanel_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 1500
    await callback.message.edit_text(f'''
üì¢ –†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–∞

üíπ 1500 MITcoin = 1 –ø–æ–¥–ø–∏—Å—á–∏–∫

–ë–∞–ª–∞–Ω—Å - {balance}; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å {maxcount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1500 MitCoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(create_tasks.chanel_task_create)


@client.message(create_tasks.chanel_task_create)
async def pr_chanel2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 1500 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chanel_confirm"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> –í–∞—à –±–∞–ª–∞–Ω—Å - {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())


@client.callback_query(F.data == 'pr_chanel_confirm')
async def pr_chanel3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    bot_username = (await bot.get_me()).username
    invite_link = f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
    add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=invite_link)
    add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
    await callback.message.edit_text(f'''
üëæ –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è —ç—Ç–æ–≥–æ...

<em>–ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ -> "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª" -> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ -> –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –û–î–ù–û –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞</em>
<b>–ò–õ–ò</b>
–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π üëá
    ''', reply_markup=keyboard)
    await state.set_state(create_tasks.chanel_task_create2)
    await state.update_data(uscount=uscount, price=price, balance=balance)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
task_creation_lock = asyncio.Lock()


@client.message(create_tasks.chanel_task_create2)
async def pr_chanel4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        data = await state.get_data()
        user_id = message.from_user.id
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')
        if amount is None:
            amount = 1
        if balance is None:
            user = await DB.select_user(user_id)
            balance = user['balance']
        if price is None:
            price = 1500

        new_balance = balance - price
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if data.get('task_created'):
            await message.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.",
                                 reply_markup=pr_menu_canc())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if not message.forward_from_chat:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.", reply_markup=pr_menu_canc())
            return

        channel_id = message.forward_from_chat.id
        bot_info = await bot.get_me()

        try:
            bot_member = await bot.get_chat_member(chat_id=channel_id, user_id=bot_info.id)
        except Exception:
            await message.answer("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª...",
                                 reply_markup=pr_menu_canc())
            return

        if bot_member.status != ChatMemberStatus.ADMINISTRATOR or not bot_member.can_invite_users:
            await message.answer("ü´§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=pr_menu_canc())
            return

        # –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        await state.update_data(channel_id=channel_id)
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        await message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup()
        )

        task_type = 1

        await DB.update_balance(user_id, balance=new_balance)
        await DB.add_task(user_id=user_id, target_id=channel_id, amount=amount, task_type=task_type)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
        await state.update_data(task_created=True)
        await state.clear()


@client.callback_query(F.data == 'chat_pr_button')
async def pr_chat_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 1500
    await callback.message.edit_text(f'''
üë• –†–µ–∫–ª–∞–º–∞ —á–∞—Ç–∞

üíµ 1500 MIT coin = 1 —É—á–∞—Å—Ç–Ω–∏–∫

–ë–∞–ª–∞–Ω—Å - <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1500 MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(create_tasks.chat_task_create)


@client.message(create_tasks.chat_task_create)
async def pr_chat2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 1500 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_chat_confirm"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> –í–∞—à –±–∞–ª–∞–Ω—Å - {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())


@client.callback_query(F.data == 'pr_chat_confirm')
async def pr_chat3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    bot_username = (await bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?startgroup&admin=invite_users+manage_chat"

    add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url=invite_link)
    add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
    await callback.message.edit_text(f'''
üëæ –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–ª—è —ç—Ç–æ–≥–æ...

<em>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É -> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ -> –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–æ–¥–æ–º</em>
    ''', reply_markup=keyboard)
    await state.set_state(create_tasks.chat_task_create2)
    await state.update_data(uscount=uscount, price=price, balance=balance)


@client.message(create_tasks.chat_task_create2)
async def pr_chat4(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    amount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    user_id = message.from_user.id
    bot_info = await bot.get_me()
    code = message.text.strip()
    code_chat_id, code_user_id = map(int, code.split(":"))
    print(f'chat_id-{code_chat_id}; code_user_id - {code_user_id}, real user id - {user_id}')
    if user_id == code_user_id:
        try:
            bot_member = await bot.get_chat_member(chat_id=code_chat_id, user_id=bot_info.id)
        except Exception as e:
            await message.answer(f"‚òπ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.",
                                 reply_markup=pr_menu_canc())
            return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if bot_member.status != ChatMemberStatus.ADMINISTRATOR:
            await message.answer(
                "‚òπ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ",
                reply_markup=pr_menu_canc())
            return

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        await message.answer(
            "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
            reply_markup=builder.as_markup())
        user_id = message.from_user.id
        task_type = 2  # –ß–∞—Ç
        new_balance = balance - price
        await DB.update_balance(user_id, balance=new_balance)
        await DB.add_task(user_id=user_id, target_id=code_chat_id, amount=amount, task_type=task_type)
        await bot.send_message(code_chat_id, 'ü•≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

        await state.clear()

    else:
        await message.answer("ü´§ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...",
                             reply_markup=pr_menu_canc())


@client.my_chat_member()
async def on_bot_added(event: ChatMemberUpdated, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    if event.new_chat_member.user.id == (await bot.get_me()).id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        if event.chat.type in ['group', 'supergroup']:
            # –ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
            if event.new_chat_member.status in ['member', 'administrator']:
                chat_id = event.chat.id
                chat_title = event.chat.title
                inv_user_id = event.from_user.id

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                await bot.send_message(chat_id, "üëã")
                await bot.send_message(chat_id, f"{chat_id}:{inv_user_id}")
                await bot.send_message(chat_id,
                                       "üëÜ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞")
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
        elif event.chat.type == 'channel':
            return


@client.callback_query(F.data == 'post_pr_button')
async def pr_post_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    maxcount = balance // 300
    await callback.message.edit_text(f'''
üëÄ –†–µ–∫–ª–∞–º–∞ –ø–æ—Å—Ç–∞

üíµ 300 MITcoin = 1 –ø—Ä–æ—Å–º–æ—Ç—Ä

–ë–∞–ª–∞–Ω—Å - <b>{balance}</b>; –í—Å–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <b>{maxcount}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>‚ùì

<em>–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 300 MITcoin</em>
    ''', reply_markup=pr_menu_canc())
    await state.set_state(create_tasks.post_task_create)


@client.message(create_tasks.post_task_create)
async def pr_post2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    if balance is None:
        balance = 0
    try:
        uscount = int(message.text.strip())
        if uscount >= 1:
            price = 300 * uscount
            await state.update_data(uscount=uscount, price=price, balance=balance)
            if balance >= price:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pr_post_confirm"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üëÄ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {uscount}</b>\nüí∞<b> –°—Ç–æ–∏–º–æ—Å—Ç—å - {price} MITcoin</b>\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ...</em>',
                    reply_markup=builder.as_markup())
            else:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="cancel_all"))
                builder.add(types.InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="pr_menu_cancel"))
                await message.answer(
                    f'üò¢ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b> –í–∞—à –±–∞–ª–∞–Ω—Å - {balance} MITcoin\n<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...</em>',
                    reply_markup=builder.as_markup())
        else:
            await message.answer('<b>‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç 1 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>\n–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ...',
                                 reply_markup=pr_menu_canc())
    except ValueError:
        await message.answer('<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...', reply_markup=pr_menu_canc())


@client.callback_query(F.data == 'pr_post_confirm')
async def pr_post3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    uscount = data.get('uscount')
    price = data.get('price')
    balance = data.get('balance')
    await state.clear()
    await callback.message.edit_text(f'''
üëæ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –û–î–ò–ù –ø–æ—Å—Ç (‚Äº –µ—Å–ª–∏ –ø–æ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ - –ø–µ—Ä–µ—à–ª–∏—Ç–µ –û–î–ù–£ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å. –Ø –∂–¥—É...
    ''', reply_markup=pr_menu_canc())
    await state.set_state(create_tasks.post_task_create2)
    await state.update_data(uscount=uscount, price=price, balance=balance)


@client.message(create_tasks.post_task_create2)
async def pr_post4(message: types.Message, state: FSMContext, bot: Bot):
    async with task_creation_lock:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        user_id = message.from_user.id
        data = await state.get_data()
        amount = data.get('uscount')
        price = data.get('price')
        balance = data.get('balance')
        if amount is None:
            amount = 1
        if balance is None:
            user = await DB.select_user(user_id)
            balance = user['balance']
        if price is None:
            price = 600

        if message.forward_from_chat:
            message_id = message.forward_from_message_id
            chat_id = message.forward_from_chat.id
            target_id_code = f'{chat_id}:{message_id}'

            try:
                await bot.forward_message(chat_id=user_id, from_chat_id=chat_id, message_id=message_id)
                task_type = 3  # –ø–æ—Å—Ç
                new_balance = balance - price
                await DB.update_balance(user_id, balance=new_balance)
                await DB.add_task(user_id=user_id, target_id=target_id_code, amount=amount, task_type=task_type)

                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
                await message.answer(
                    "ü•≥ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>\n\n–ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üòâ",
                    reply_markup=builder.as_markup())
                await state.clear()
            except:
                bot_username = (await bot.get_me()).username
                invite_link = f"http://t.me/{bot_username}?startchannel&admin=invite_users+manage_chat"
                add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url=invite_link)
                add_button1 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data='pr_menu_cancel')
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
                await message.answer(
                    'üò∂ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ...',
                    reply_markup=keyboard)


async def generate_tasks_keyboard_chating(chating_tasks, vchatingpage, total_pages, bot):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for task in chating_tasks:
        chat_id = task[1]
        chat = await bot.get_chat(chat_id)
        price = task[2]
        chat_title = chat.title
        button_text = f"{chat_title} | {price}"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"vchatingtask_{task[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_menu"))
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if vchatingpage > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"vchatingpage_{vchatingpage - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(vchatingpage), callback_data="current_page"))
    if vchatingpage < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"vchatingpage_{vchatingpage + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
async def paginate_tasks_chating(tasks, vchatingpage=1, per_page=5):
    total_pages = (len(tasks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (vchatingpage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = tasks[start_idx:end_idx]
    return tasks_on_page, total_pages


@client.callback_query(F.data == 'work_chating')
async def chating_tasks_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    tasks = await DB.get_chating_tasks()

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    vchatingpage = 1
    tasks_on_page, total_pages = paginate_tasks(tasks, vchatingpage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_chating(tasks_on_page, vchatingpage, total_pages, bot)

    await callback.message.edit_text(
        "üî• <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ Mit Coin –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=keyboard)


@client.callback_query(lambda c: c.data.startswith("vchatingpage_"))
async def vchange_page_handler(callback: types.CallbackQuery, bot: Bot):
    vchatingpage = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    tasks = await DB.get_chating_tasks()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(tasks, vchatingpage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_chating(tasks_on_page, vchatingpage, total_pages, bot)

    await callback.message.edit_text(
        "üî• <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ MITcoin –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
async def check_admin_and_get_invite_link_chating(bot, chat_id):
    try:
        chat_administrators = await bot.get_chat_administrators(chat_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        for admin in chat_administrators:
            if admin.user.id == bot.id:
                # –ï—Å–ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                invite_link = await bot.export_chat_invite_link(chat_id)
                return invite_link
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω
        return "üòë –û—à–∏–±–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ..."
    except:
        return "üòë –û—à–∏–±–∫–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ..."


@client.callback_query(lambda c: c.data.startswith("vchatingtask_"))
async def task_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    task_id = int(callback.data.split('_')[1])
    task = await DB.get_chating_task_by_id(task_id)

    price = task[2]

    invite_link = await check_admin_and_get_invite_link(bot, task[1])
    chat_id = task[1]
    chat = await bot.get_chat(chat_id)
    task_info = f"""
<b>{chat.title}</b>

<em>–í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç, –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ MITcoin</em>

üí∞ –ü–ª–∞—Ç–∞ –∑–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ - {price} MITcoin 

{invite_link}    
    """
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="work_chating"))

    await callback.message.edit_text(task_info, reply_markup=builder.as_markup())


@client.message(Command('help'))
async def help_handler(message: types.Message, state: FSMContext):
    if message.chat.type in ['group', 'supergroup']:
        await message.answer('''
<b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü)</b>:

1) –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏ –≤ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö üìõ
2) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup @–∫–∞–Ω–∞–ª 
(–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü —Å —Ç–∞–π–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup @–∫–∞–Ω–∞–ª **h, –≥–¥–µ ** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
<i>–ø—Ä–∏–º–µ—Ä - /setup @mitcoinnews 12h</i>
3) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsetup 
–∏–ª–∏ /unsetup @–∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ 
4) —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü –≤ —á–∞—Ç–µ - /status

–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à—É—Ç—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã 
        ''')


# –ö–æ–º–∞–Ω–¥–∞ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü
@client.message(Command('setup'))
async def setup_op(message: types.Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not await is_user_admin(user_id, chat_id, bot):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.reply("üßæ –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ü. –ü—Ä–∏–º–µ—Ä: /setup @mitcoinnews")
        return

    channel_id = command_parts[1]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status != 'administrator':
            await message.reply("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ ‚ö†Ô∏è")
            return
    except TelegramBadRequest:
        await message.reply("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üìõ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–π–º–µ—Ä–∞
    timer_hours = None
    if len(command_parts) > 2 and command_parts[2].endswith("h"):
        timer_hours = int(command_parts[2][:-1])
        expiration_time = datetime.datetime.now() + datetime.timedelta(hours=timer_hours)
    else:
        expiration_time = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await DB.add_op(chat_id, channel_id, expiration_time)

    if timer_hours:
        await message.reply(f"–û–ü –Ω–∞ {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {timer_hours} —á–∞—Å–æ–≤.")
    else:
        await message.reply(f"–û–ü –Ω–∞ {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è
    if expiration_time:
        await asyncio.create_task(remove_op_after_delay(chat_id, channel_id, expiration_time, bot))


# –ö–æ–º–∞–Ω–¥–∞ /unsetup –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –û–ü
@client.message(Command('unsetup'))
async def unsetup_op(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not await is_user_admin(user_id, chat_id, bot):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    command_parts = message.text.split()
    if len(command_parts) == 1:
        await DB.remove_op(chat_id)
        await message.reply("–í—Å–µ –û–ü –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã üóëÔ∏è")
    else:
        channel_id = command_parts[1]
        await DB.remove_op(chat_id, channel_id)
        await message.reply(f"–û–ü –Ω–∞ {channel_id} —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è")


# –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –û–ü
@client.message(Command('status'))
async def status_op(message: types.Message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –û–ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    ops = await DB.get_ops(chat_id)
    if not ops:
        await message.reply("üìÑ –í —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü")
        return

    status_message = "üóíÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –û–ü:\n\n"
    for op in ops:
        channel = op[0]
        expiration = op[1]

        if expiration:
            expiration = datetime.datetime.strptime(expiration, "%Y-%m-%d %H:%M:%S.%f")

            remaining_time = expiration - datetime.datetime.now()
            # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
            total_seconds = remaining_time.total_seconds()
            hours_left = int(total_seconds // 3600)
            minutes_left = int((total_seconds % 3600) // 60)

            status_message += f"{channel} - {hours_left} —á–∞—Å(–æ–≤) {minutes_left} –º–∏–Ω—É—Ç(—ã)\n"
        else:
            status_message += f"{channel}\n"

    await message.reply(status_message)


async def is_user_admin(user_id, chat_id, bot):
    member = await bot.get_chat_member(chat_id, user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    return member.status in ["administrator", "creator"]


async def is_user_subscribed(user_id: int, channel_id: int, bot: Bot) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        return member.status != 'left'
    except TelegramBadRequest:
        return False


async def remove_op_after_delay(chat_id: int, channel_id: str, expiration_time: datetime.datetime, bot: Bot):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –û–ü –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
    delay = (expiration_time - datetime.datetime.now()).total_seconds()
    await asyncio.sleep(delay)
    await DB.remove_op(chat_id, channel_id)
    await bot.send_message(chat_id, f"–û–ü –Ω–∞ {channel_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–∞ üóëÔ∏è")


@client.message(lambda message: message.chat.type in ['group', 'supergroup'])
async def handler_chat_message(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id
    name = message.from_user.full_name
    commands_list = ['/help', '/status', '/setup', '/unsetup']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–æ–π
    if (message.chat.type in ['group', 'supergroup']) and (message.text not in commands_list):

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chating_tasks = await DB.get_chating_tasks()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
        for task in chating_tasks:
            task_chat_id = task[1]
            price = task[2]
            if chat_id == task_chat_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user_in_db = await DB.select_user(user_id)
                if user_in_db:
                    # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å
                    await DB.add_balance(user_id, price)
                break

        member = await bot.get_chat_member(chat_id, user_id)
        if name is None:
            name = "üë§"
        if member.status in ["member"]:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –û–ü –¥–ª—è —á–∞—Ç–∞
            ops = await DB.get_ops(chat_id)
            if not ops:
                return  # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –û–ü, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –û–ü
            unsubscribed_channels = []
            op_tasks = await DB.get_op_tasks()
            if op_tasks:
                pr_op_task = random.choice(op_tasks)
                pr_op = pr_op_task[1]
                text = pr_op_task[2]

                pr_text = f"<a href='https://t.me/{pr_op[1:]}'>{text}</a>"
            else:
                pr_text = "„Ö§"

            # –¶–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for op in ops:
                channel_id = op[0]
                if not await is_user_subscribed(user_id, channel_id, bot):
                    unsubscribed_channels.append(channel_id)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            if unsubscribed_channels:
                try:
                    await message.delete()
                except:
                    print(f"–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é, —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Ç–µ–∫—Å—Ç –≤ URL-–∫–∞–Ω–∞–ª–µ
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel[1:]}")]
                    for channel in unsubscribed_channels
                ])

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                channels_list = "\n".join(
                    [f"@{channel[1:]}" for channel in unsubscribed_channels])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                msg = await message.answer(f"""
<a href='tg://user?id={user_id}'>{name}</a>, <b>–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>

{channels_list}
                """, reply_markup=keyboard, disable_web_page_preview=True)
                await asyncio.sleep(30)
                await msg.delete()








@client.callback_query(F.data == 'checks_menu')
async def checks_menu(callback: types.CallbackQuery, bot: Bot):
    add_button = InlineKeyboardButton(text="üë§ –°–∏–Ω–≥–ª-—á–µ–∫ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)", callback_data="single_check")
    add_button1 = InlineKeyboardButton(text="üí∞ –ú–æ–∏ —á–µ–∫–∏", callback_data="my_checks")
    add_button2 = InlineKeyboardButton(text="üë• –ú—É–ª—å—Ç–∏-—á–µ–∫ (–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π)", callback_data=f"multi_check")
    add_button3 = InlineKeyboardButton(text="üîô", callback_data="back_menu")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3]])

    await callback.message.edit_text("üí∏ –ß–µ–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å Mit Coin\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —á–µ–∫–∞:</b>", reply_markup=keyboard)



CHECKS_TYPES = {
    1: 'üë§ –°–∏–Ω–≥–ª-–ß–µ–∫',
    2: 'üë• –ú—É–ª—å—Ç–∏-—á–µ–∫'
}


async def generate_tasks_keyboard_checks(checks, checkspage, total_pages):
    builder = InlineKeyboardBuilder()

    # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    for check in checks:
        print(check)
        check_type = CHECKS_TYPES.get(check[3], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        amount = check[4]
        button_text = f"{check_type} | {amount} Mit Coin"
        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(types.InlineKeyboardButton(text=button_text, callback_data=f"check_{check[0]}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checks_menu"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = []
    if checkspage > 1:
        pagination.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"checkspage_{checkspage - 1}"))
    pagination.append(types.InlineKeyboardButton(text=str(checkspage), callback_data="checkscurrent_page"))
    if checkspage < total_pages:
        pagination.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"checkspage_{checkspage + 1}"))

    builder.row(*pagination)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    return builder.as_markup()


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
def checkspaginate_tasks(checks, checkspage=1, per_page=5):
    total_pages = (len(checks) + per_page - 1) // per_page  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_idx = (checkspage - 1) * per_page
    end_idx = start_idx + per_page
    tasks_on_page = checks[start_idx:end_idx]
    return tasks_on_page, total_pages


@client.callback_query(F.data == 'my_checks')
async def my_checks(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)
    print(checks)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    checkspage = 1
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ <b>–í–∞—à–∏ —á–µ–∫–∏:</b>", reply_markup=keyboard)


@client.callback_query(lambda c: c.data.startswith("checkspage_"))
async def change_page_handler(callback: types.CallbackQuery):
    checkspage = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ –í–∞—à–∏ —á–µ–∫–∏:", reply_markup=keyboard)




@client.callback_query(lambda c: c.data.startswith("check_"))
async def check_detail_handler(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()
    check_id = int(callback.data.split('_')[1])
    check = await DB.get_check_by_id(check_id)
    bot_username = (await bot.get_me()).username
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    check_type = CHECKS_TYPES.get(check[3], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    amount = check[5]
    sum = check[4]
    check_link = f'https://t.me/{bot_username}?start=check_{check[1]}'

    discription = check[6]
    pin_the_user = check[7]

    password = check[8]
    OP_check = check[9]

    if discription is None:
        discription = " "
    if pin_the_user is None:
        pin_the_user = "–Ω–µ—Ç"
    if password is None:
        password = "–Ω–µ—Ç"
    if OP_check is None:
        OP_check = "–Ω–µ—Ç"

    if check[3] == 1:
        check_info = f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum} MIT Coin</b>

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {discription}
üìå <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> {pin_the_user}

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ - –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
        '''
    elif check[3] == 2:
        check_info = f"""
üí∏ <b>–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum*amount} MIT Coin</b>

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {amount} Mit Coin</b>
<b>–°—É–º–º–∞ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {sum} Mit Coin</b>
 
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {discription}
üîê <b>–ü–∞—Ä–æ–ª—å:</b> {password}
üì£ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–û–ü):</b> {OP_check}


‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ - –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
        """

    if check[3] == 1:
        add_button = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=f'\n–ß–ï–ö –ù–ê –°–£–ú–ú–£ {sum} MIT COIN\n{discription}\n\n{check_link}')
        add_button1 = InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'adddiscription_{check_id}')
        add_button2 = InlineKeyboardButton(text="‚õì –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"pincheckuser_{check_id}")
        add_button3 = InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"checkdelete_{check_id}")
        add_button4 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_checks")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3], [add_button4]])
    elif check[3] == 2:
        add_button = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                          switch_inline_query=f'üí∏ –ß–ï–ö –ù–ê –°–£–ú–ú–£ {sum*amount} MIT COIN\n{discription}\n\n{check_link}')
        add_button1 = InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'adddiscription_{check_id}')
        add_button2 = InlineKeyboardButton(text="üì£ –î–æ–±–∞–≤–∏—Ç—å –û–ü", callback_data=f"addopcheck_{check_id}")
        add_button3 = InlineKeyboardButton(text="üîë –ó–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"addpasswordcheck_{check_id}")
        add_button4 = InlineKeyboardButton(text="üëë –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ MIT Coin DROPS", callback_data=f"sendmitdrops_{check_id}")
        add_button5 = InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ–∫–∞", callback_data=f"addbalancecheck_{check_id}")
        add_button6 = InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"checkdelete_{check_id}")
        add_button7 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_checks")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3], [add_button4], [add_button5], [add_button6], [add_button7]])
    await callback.message.edit_text(check_info, reply_markup=keyboard)






@client.callback_query(lambda c: c.data.startswith("sendmitdrops_"))
async def sendmitdrops(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    add_button = InlineKeyboardButton(text="üì§ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å", callback_data=f"mitcoindrop_{check_id}")
    add_button1 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1]])
    await callback.message.edit_text('''
<b>–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–π —á–µ–∫ –≤ @mitcoindrops</b> 

<b>–£—Å–ª–æ–≤–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>
1) –ß–µ–∫ –±–µ–∑ –ø–∞—Ä–æ–ª—è
2) –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ –±–æ–ª—å—à–µ 50000 Mit Coin 
    ''', reply_markup=keyboard)

@client.callback_query(lambda c: c.data.startswith("mitcoindrop_"))
async def sendmitdrops1(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    check = await DB.get_check_by_id(check_id)
    type = check[3]
    sum = check[4]
    amount = check[5]
    bot_username = (await bot.get_me()).username
    general_sum = sum*amount
    check_link = f'https://t.me/{bot_username}?start=check_{check[1]}'
    if type == 2 and general_sum >= 50000 and check[8] is None:

        if check[6] is not None:
            description = check[6]
        else:
            description = ''
            
        text = f'''
üí∏ <b>–ß–µ–∫ –Ω–∞ —Å—É–º–º—É {general_sum} MitCoin</b>

{amount} –∞–∫—Ç–∏–≤–∞—Ü–∏–π
{sum} MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é

{description}

{check_link}        
        '''
        try:
            add_button = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", url=check_link)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
            await bot.send_message(chat_id='-1002277582115', text=text, reply_markup=keyboard)
            await callback.message.edit_text('ü•≥ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –≤ @mitcoindrops',reply_markup=back_menu_kb())
        except:
            await callback.message.edit_text('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ–∫–∞ –≤ @mitcoindrops, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Ç—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É', reply_markup=back_menu_kb())
    else:
        await callback.message.edit_text(
            '‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —É—Å–ª–æ–≤–∏—è–º',
            reply_markup=back_menu_kb())

@client.callback_query(lambda c: c.data.startswith("addopcheck_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text('üì£ <b>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–û–ü) –¥–ª—è —á–µ–∫–∞</b>\n\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</i>\n\n<b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞</b>', reply_markup=keyboard)
    await state.set_state(checks.check_op)
    await state.update_data(check_id=check_id)

@client.message(checks.check_op)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    #check = await DB.get_check_by_id(check_id)
    #check_OP = check[9]

    #if check_OP is not None:
        #availeble_OP = check_OP.split('_')
        #print(availeble_OP)
        #if len(availeble_OP) >= 5:
            #await message.answer('‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫ –û–ü')

        
    try:
        text = str(message.text)

        if text == "None":
            await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫ –û–ü')
            return
        try:
            chat = await bot.get_chat(text)
            test = chat.invite_link
            if not test:
                await message.answer('‚ùó –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
                return
            print(chat)
            #OP = f'{text}_'
            await DB.update_check(check_id=check_id, OP_id=text)
            #add_button = InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"addnextop_{check_id}")
            add_button1 = InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"check_{check_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1]])
            await message.answer(f'üì£ –ö–∞–Ω–∞–ª <b>{chat.title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –û–ü', reply_markup=keyboard)
            await state.clear()
        except:
            await message.answer('‚òπ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É @username, –ª–∏–±–æ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
            return

    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫ –û–ü')

#@client.callback_query(lambda c: c.data.startswith("addnextop_"))
#async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
 #   check_id = int(callback.data.split('_')[1])
  #  user_id = callback.from_user.id

   # add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    #keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    #await callback.message.edit_text('üì£ <b>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞</b>\n\n<i>–í—Å–µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –∫–∞–Ω–∞–ª–æ–≤</i>', reply_markup=keyboard)
    #await state.set_state(checks.check_op)
    #await state.update_data(check_id=check_id)













@client.callback_query(lambda c: c.data.startswith("addbalancecheck_"))
async def activation_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user["balance"]
    check = await DB.get_check_by_id(check_id)
    sum = check[4]
    available_act = balance // sum
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text(f'‚ûï –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫ –≤–∞—à–µ–º—É —á–µ–∫—É, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–π\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å ({available_act} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ):</b>', reply_markup=keyboard)
    await state.set_state(checks.add_activation)
    await state.update_data(check_id=check_id)

@client.message(checks.add_activation)
async def handle_custom_check_activation(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    user = await DB.select_user(user_id)
    check_id = data.get('check_id')
    balance = user["balance"]
    check = await DB.get_check_by_id(check_id)
    sum = check[4]
    available_act = balance // sum
    try:
        text = int(message.text)
        if text > available_act:
            await message.answer(f'‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {available_act} –∞–∫—Ç–∏–≤–∞—Ü–∏–π')
            return
        if text == "None":
            await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return
        new_amount = check[5] + text
        await DB.update_check(check_id=check_id, amount=new_amount)
        new_price = sum*text
        await DB.add_balance(user_id, amount=-new_price)
        add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'ü•≥ <b>–ö —á–µ–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–æ {text} –∞–∫—Ç–∏–≤–∞—Ü–∏–π</b>', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞')


















@client.callback_query(lambda c: c.data.startswith("addpasswordcheck_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    add_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"check_{check_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —á–µ–∫–∞:</b>', reply_markup=keyboard)
    await state.set_state(checks.check_password)
    await state.update_data(check_id=check_id)

@client.message(checks.check_password)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        text = str(message.text)
        if len(text) > 20:
            await message.answer('‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤...')
            return
        if text == "None":
            await message.answer('‚ùó –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
            return
        await DB.update_check(check_id=check_id, password=text)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'<i>{text}</i>\n\n–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫ —á–µ–∫—É', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ...')








@client.callback_query(lambda c: c.data.startswith("adddiscription_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–µ–∫–∞:</b>')
    await state.set_state(checks.check_discription)
    await state.update_data(check_id=check_id)

@client.message(checks.check_discription)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        text = str(message.text)
        if len(text) > 50:
            await message.answer('‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤...')
            return
        if text == "None":
            await message.answer('‚ùó –í –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–≤, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –¥—Ä—É–≥–æ–≥–æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç...')
            return
        await DB.update_check(check_id=check_id, description=text)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'<i>{text}</i>\n\n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ —á–µ–∫—É', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —á–µ–∫—É...')







@client.callback_query(lambda c: c.data.startswith("pincheckuser_"))
async def delete_check_handler(callback: types.CallbackQuery, state: FSMContext):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    await callback.message.edit_text('üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ª–∏–±–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–µ–∫</b>')
    await state.set_state(checks.check_lock_user)
    await state.update_data(check_id=check_id)

@client.message(checks.check_lock_user)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    check_id = data.get('check_id')
    try:
        user = str(message.text)

        if user == "None" or len(user) > 20:
            await message.answer('‚ùó –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ª–∏–±–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            return
        await DB.update_check(check_id=check_id, locked_for_user=user)
        add_button = InlineKeyboardButton(text="üîô –ö —á–µ–∫—É", callback_data=f"check_{check_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button]])
        await message.answer(f'üîê <b>–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è</b> {user}', reply_markup=keyboard)
        await state.clear()
    except ValueError:
        await message.answer('‚ùó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ...')











@client.callback_query(lambda c: c.data.startswith("checkdelete_"))
async def delete_check_handler(callback: types.CallbackQuery):
    check_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    user = await DB.select_user(user_id)
    balance = user['balance']
    check = await DB.get_check_by_id(check_id)
    amount = check[5]
    sum = check[4]

    cost = sum*amount

    new_balance = balance + cost

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await DB.delete_check(check_id=check_id, user_id=user_id)
    await DB.update_balance(user_id, balance=new_balance)
    await callback.message.edit_text("üóë")
    await asyncio.sleep(1)
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º
    user_id = callback.from_user.id
    checks = await DB.get_check_by_user_id(user_id)
    checkspage = 1
    tasks_on_page, total_pages = paginate_tasks(checks, checkspage)
    keyboard = await generate_tasks_keyboard_checks(tasks_on_page, checkspage, total_pages)

    await callback.message.edit_text("üí∏ <b>–í–∞—à–∏ —á–µ–∫–∏:</b>", reply_markup=keyboard)






@client.callback_query(F.data == 'single_check')
async def create_single_check(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    user_balance = await DB.get_user_balance(user_id)


    if user_balance < 1010:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=builder.as_markup())
        return

    max_check = user_balance - (user_balance // 100)


    add_button = InlineKeyboardButton(text=f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ ({max_check} MitCoin)", callback_data=f'checkamount_{max_check}')
    add_button1 = InlineKeyboardButton(text=f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ (1000 MitCoin)", callback_data=f'checkamount_1000')
    add_button2 = InlineKeyboardButton(text="üìä –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='customcheck_amount')
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button], [add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(
        "üí∞ <b>–°–∫–æ–ª—å–∫–æ MitCoin –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?</b>",
        reply_markup=keyboard
    )

@client.callback_query(F.data == 'customcheck_amount')
async def custom_check_amount(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É MitCoin, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>"
    )
    await state.set_state(checks.single_check_create)


@client.message(checks.single_check_create)
async def handle_custom_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_balance = await DB.get_user_balance(user_id)


    bot_username = (await bot.get_me()).username
    try:
        sum = int(message.text)
        if sum + (sum // 100) > user_balance:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
            builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ —ç—Ç—É —Å—É–º–º—É, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ",
                reply_markup=builder.as_markup()
            )
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞

        await state.clear()
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
        uid = str(uuid.uuid4())
        await DB.update_balance(user_id, balance=user_balance - (sum + sum//100))
        await DB.create_check(uid=uid, user_id=user_id, type=1, sum=sum, amount=1)
        check = await DB.get_check_by_uid(uid)
        check_id = check[0]
        check_link = f"https://t.me/{bot_username}?start=check_{uid}"
        add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
        add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
        add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
        await message.answer(f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum} MitCoin</b>

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç
<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>

<span class="tg-spoiler">{check_link}</span>
        ''', reply_markup=keyboard)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@client.callback_query(F.data.startswith('checkamount_'))
async def handle_check_amount(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    sum = int(callback.data.split('_')[1])
    bot_username = (await bot.get_me()).username
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    user_balance = await DB.get_user_balance(user_id)


    if sum + (sum//100) > user_balance:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ —ç—Ç—É —Å—É–º–º—É.",
            reply_markup=builder.as_markup()
        )
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞


    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
    uid = str(uuid.uuid4())
    await DB.update_balance(user_id, balance=user_balance - (sum + (sum // 100)))
    await DB.create_check(uid=uid, user_id=user_id, type=1, sum=sum, amount=1)
    check = await DB.get_check_by_uid(uid)
    check_id = check[0]
    check_link = f"https://t.me/{bot_username}?start=check_{uid}"
    add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
    add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
    add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
    await callback.message.edit_text(f'''
üí∏ <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —á–µ–∫ –Ω–∞ —Å—É–º–º—É {sum} MitCoin</b>

<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>
‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç

<span class="tg-spoiler">{check_link}</span>
    ''', reply_markup=keyboard)






@client.callback_query(F.data == 'multi_check')
async def create_multi_check(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    user_balance = await DB.get_user_balance(user_id)


    if user_balance < 1010:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
        builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏-—á–µ–∫–∞.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=builder.as_markup()
        )
        return

    await callback.message.edit_text(
        f"üìã <b>–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ (1000 MitCoin) –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {int((user_balance/1000) - ((user_balance/1000)/100))}", reply_markup=cancel_all_kb()
    )
    await state.set_state(checks.multi_check_quantity)
    await state.update_data(balance=user_balance)


@client.message(checks.multi_check_quantity)
async def handle_multi_check_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    balance = data.get('balance')
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0</b>, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=cancel_all_kb())
            return
        if quantity > balance // 1000:
            await message.answer(f"‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MitCoin –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–∞.</b>\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=cancel_all_kb())
            return

        await message.answer(f"üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)</b>\n\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - {int(balance//quantity - ((balance//quantity)//100))} MitCoin</i>", reply_markup=cancel_all_kb())
        await state.set_state(checks.multi_check_amount)
        await state.update_data(quantity=quantity)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π", reply_markup=cancel_all_kb())


@client.message(checks.multi_check_amount)
async def handle_multi_check_amount(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    user_balance = await DB.get_user_balance(user_id)

    bot_username = (await bot.get_me()).username

    try:
        data = await state.get_data()
        quantity = data.get('quantity')

        amount_per_check = int(message.text)
        total_amo = (quantity * amount_per_check) // 100
        total_amount = quantity * amount_per_check + total_amo

        if amount_per_check < 1000:
            await message.answer("‚ùå –°—É–º–º–∞ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1000 MitCoin –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_all_kb())
            return

        if total_amount > user_balance:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit_menu'))
            builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_menu'))
            await message.answer(
                f"‚ùå <b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω–∞ {quantity} –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ —Å—É–º–º—ã –≤ {amount_per_check} MitCoin –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é</b>\n\n–í–∞—à –±–∞–ª–∞–Ω—Å - {user_balance}\n–û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ - {total_amount} (–∫–æ–º–∏—Å—Å–∏—è 1% - {total_amo} MitCoin)",
                reply_markup=builder.as_markup()
            )
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
        await DB.update_balance(user_id, balance=user_balance - (total_amount + total_amount//100))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤
        uid = str(uuid.uuid4())
        await DB.create_check(uid=uid, user_id=user_id, type=2, sum=amount_per_check, amount=quantity)

        check = await DB.get_check_by_uid(uid)
        check_id = check[0]
        check_link = f"https://t.me/{bot_username}?start=check_{uid}"

        add_button1 = InlineKeyboardButton(text="‚úà –û—Ç–ø—Ä–∞–≤–∏—Ç—å", switch_inline_query=check_link)
        add_button2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f'check_{check_id}')
        add_button3 = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='checks_menu')

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[add_button1], [add_button2], [add_button3]])
        await message.answer(f'''
üí∏ <b>–í–∞—à –º—É–ª—å—Ç–∏-—á–µ–∫ —Å–æ–∑–¥–∞–Ω:</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {quantity}
–°—É–º–º–∞ –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é: {amount_per_check} MitCoin

üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —á–µ–∫–∞: {total_amount} MitCoin

‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º—É-–ª–∏–±–æ —ç—Ç—É —Å—Å—ã–ª–∫—É –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π –ø–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –æ—Ç–≤–µ—Ç
<i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</i>

<span class="tg-spoiler">{check_link}</span>
''', reply_markup=keyboard)

        await state.clear()

    except ValueError:
        await message.answer("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∑–∞ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ–∫–∞</b>")




